Pizza Sales SQL Project Queries
Q1. Retrieve the total number of orders placed.
SELECT COUNT(order_id) AS total_orders FROM orders;


Q2. Identify the highest-priced pizza.
SELECT pizza_types.name, pizzas.price 
FROM pizzas 
JOIN pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id 
ORDER BY pizzas.price DESC 
LIMIT 1;


Q3. Count the number of pizzas ordered by size.
SELECT pizzas.size, COUNT(order_details.order_details_id) 
FROM pizzas 
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id 
GROUP BY pizzas.size;


Q4. Find top 5 most ordered pizza types.
SELECT pizzas.pizza_type_id, COUNT(order_details.order_details_id) 
FROM pizzas 
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id 
GROUP BY pizzas.pizza_type_id 
ORDER BY COUNT(order_details.order_details_id) DESC 
LIMIT 5;


Q5. Find total pizzas ordered per category.
SELECT pizza_types.category, SUM(order_details.quantity) 
FROM pizzas 
JOIN pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id 
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id 
GROUP BY pizza_types.category 
ORDER BY SUM(order_details.quantity);


Q6. Find order count by hour.
SELECT HOUR(order_time), COUNT(order_id) 
FROM orders 
GROUP BY HOUR(order_time);


Q7. Count number of pizza names per category.
SELECT category, COUNT(name) FROM pizza_types GROUP BY category;


Q8. Find top 5 order days with highest pizza sales.
SELECT DATE(orders.order_date) AS order_day, SUM(order_details.quantity) AS total_pizzas 
FROM orders 
JOIN order_details ON order_details.order_id = orders.order_id 
GROUP BY DATE(orders.order_date) 
ORDER BY total_pizzas DESC 
LIMIT 5;


Q9. Find average pizzas sold per day.
SELECT AVG(aman) 
FROM (
    SELECT DATE(orders.order_date) AS order_day, SUM(order_details.quantity) AS aman 
    FROM orders 
    JOIN order_details ON order_details.order_id = orders.order_id 
    GROUP BY DATE(orders.order_date)
) AS daily_sales;


Q10. Calculate revenue by pizza category.
SELECT pizza_types.category, SUM(order_details.quantity * pizzas.price) AS revenue 
FROM pizza_types 
JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id 
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id 
GROUP BY pizza_types.category 
ORDER BY revenue;


Q11. Calculate percentage contribution of each category to total revenue.
SELECT pizza_types.category, 
SUM(order_details.quantity * pizzas.price) / 
(SELECT SUM(order_details.quantity * pizzas.price) 
 FROM pizzas 
 JOIN order_details ON pizzas.pizza_id = order_details.pizza_id) AS revenue_percentage 
FROM pizza_types 
JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id 
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id 
GROUP BY category 
ORDER BY revenue_percentage DESC;


Q12. Analyze the cumulative revenue generated over time.
SELECT orders.order_date, 
SUM(order_details.quantity * pizzas.price) / 
(SELECT SUM(order_details.quantity * pizzas.price) 
 FROM pizzas 
 JOIN order_details ON pizzas.pizza_id = order_details.pizza_id) AS cumulative_revenue 
FROM pizzas 
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id 
JOIN orders ON orders.order_id = order_details.order_id 
GROUP BY orders.order_date 
ORDER BY cumulative_revenue;
